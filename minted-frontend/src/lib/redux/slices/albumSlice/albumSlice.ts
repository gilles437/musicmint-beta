/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit';

/* Instruments */
import { fetchOwnedAlbumListAsync, fetchAllAlbumsAsync } from './thunks';
import { Album, AlbumMetadata, SongMetadata } from './types';

/* Types */
export interface AlbumState {
  status: 'idle' | 'loading' | 'failed';
  loadingArtists: boolean;
  albums: Album[];
  albumMetadata: { [key: string]: AlbumMetadata };
  songMetadata: { [key: string]: SongMetadata };
}

const initialState: AlbumState = {
  status: 'idle',
  loadingArtists: false,
  albums: [],
  albumMetadata: {},
  songMetadata: {},
};

export const albumSlice = createSlice({
  name: 'admin',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setLoadingStatus: (state, action: PayloadAction<boolean>) => {
      state.status = action.payload ? 'loading' : 'idle';
    },
    setLoadingArtists: (state, action: PayloadAction<boolean>) => {
      state.loadingArtists = action.payload;
    },
    setAlbums: (state, action: PayloadAction<Album[]>) => {
      state.albums = action.payload;
    },
    setAlbumMetadata: (
      state,
      action: PayloadAction<{ id: string; metadata: AlbumMetadata }>
    ) => {
      if (action.payload.id) {
        state.albumMetadata[action.payload.id] = action.payload.metadata;
      }
    },
    setSongMetadata: (
      state,
      action: PayloadAction<{ id: string; metadata: SongMetadata }>
    ) => {
      if (action.payload.id) {
        state.songMetadata[action.payload.id] = action.payload.metadata;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchOwnedAlbumListAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchOwnedAlbumListAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.albums = action.payload;
      })
      .addCase(fetchAllAlbumsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllAlbumsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.albums = action.payload;
      });
  },
});

export const {
  setLoadingStatus,
  setAlbums,
  setAlbumMetadata,
  setSongMetadata,
} = albumSlice.actions;
