/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'

/* Instruments */
import { fetchSuperAdminListAsync } from './thunks'
import { Artist, SuperAdmin } from './types';

/* Types */
export interface AdminState {
  status: 'idle' | 'loading' | 'failed'
  loadingArtists: boolean;
  superAdmins: SuperAdmin[];
  artists: Artist[];
}

const initialState: AdminState = {
  status: 'idle',
  loadingArtists: false,
  superAdmins: [],
  artists: [],
}

export const adminSlice = createSlice({
  name: 'admin',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setLoadingStatus: (state, action: PayloadAction<boolean>) => {
      state.status = action.payload ? 'loading' : 'idle'
    },
    setLoadingArtists: (state, action: PayloadAction<boolean>) => {
      state.loadingArtists = action.payload;
    },
    setSuperAdmins: (state, action: PayloadAction<SuperAdmin[]>) => {
      state.superAdmins = action.payload;
    },
    setArtists: (state, action: PayloadAction<Artist[]>) => {
      state.artists = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchSuperAdminListAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchSuperAdminListAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.superAdmins = action.payload
      })
  },
})

export const {
  setLoadingStatus,
  setSuperAdmins,
  setArtists,  
} = adminSlice.actions;