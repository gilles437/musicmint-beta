"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importStar(require("assert"));
const _1 = require(".");
const mockRegistrySubstrate = {
    "archives": [
        {
            "network": "polkadot",
            "providers": [
                {
                    "provider": "subsquid",
                    "dataSourceUrl": "https://polkadot.archive.subsquid.io/graphql",
                    "explorerUrl": "https://polkadot.explorer.subsquid.io/graphql",
                    "release": "FireSquid",
                    "image": "substrate-ingest:1",
                    "ingest": "substrate-ingest:1",
                    "gateway": "archive-gateway:2"
                }
            ],
            "genesisHash": "0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d"
        },
        {
            "network": "moonbase",
            "genesisHash": "0x91bc6e169807aaa54802737e1c504b2577d4fafedd5a02c10293b1cd60e39527",
            "providers": [
                {
                    "provider": "subsquid",
                    "dataSourceUrl": "https://moonbase.archive.subsquid.io/graphql",
                    "explorerUrl": "https://moonbase.explorer.subsquid.io/graphql",
                    "release": "FireSquid",
                    "image": "subsquid/substrate-ingest:1",
                    "ingest": "subsquid/substrate-ingest:1",
                    "gateway": "subsquid/substrate-gateway:2"
                }
            ]
        },
    ]
};
const mockRegistryEVM = {
    "archives": [
        {
            "network": "binance",
            "providers": [
                {
                    "provider": "subsquid",
                    "dataSourceUrl": "https://binance.archive.subsquid.io",
                    "release": "Stage 1",
                    "ingester": "eth-stage1-ingester:0.0.43",
                    "worker": "eth-stage1-worker:0.0.43"
                }
            ]
        },
        {
            "network": "moonbase",
            "providers": [
                {
                    "provider": "subsquid",
                    "dataSourceUrl": "https://moonbase-evm.archive.subsquid.io",
                    "release": "Stage 1",
                    "ingester": "eth-stage1-ingester:0.1",
                    "worker": "eth-stage1-worker:0.1"
                }
            ]
        },
    ]
};
describe("archive lookup", function () {
    it("looks up by archive name", () => {
        const polkaArchive = (0, _1.lookupInSubstrateRegistry)("polkadot", mockRegistrySubstrate)[0].dataSourceUrl;
        (0, assert_1.default)(polkaArchive === "https://polkadot.archive.subsquid.io/graphql");
    });
    it("looks up by a named version", () => {
        const polkaArchive = (0, _1.lookupInSubstrateRegistry)("polkadot", mockRegistrySubstrate)[0].dataSourceUrl;
        (0, assert_1.default)(polkaArchive === "https://polkadot.archive.subsquid.io/graphql");
    });
    it("lookups up by name and genesis hash", () => {
        const polkaArchive = (0, _1.lookupInSubstrateRegistry)("polkadot", mockRegistrySubstrate, { genesis: "0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d" })[0].dataSourceUrl;
        (0, assert_1.default)(polkaArchive === "https://polkadot.archive.subsquid.io/graphql");
    });
    it("fails to lookup by wrong hash", () => {
        assert_1.default.throws(() => (0, _1.lookupInSubstrateRegistry)("polkadot", mockRegistrySubstrate, { genesis: "0xaaa" }), Error);
    });
    it("looks up by evm archive name", () => {
        const binanceArchive = (0, _1.lookupInEVMRegistry)("binance", mockRegistryEVM)[0].dataSourceUrl;
        (0, assert_1.default)(binanceArchive === "https://binance.archive.subsquid.io");
    });
    it("lookups up fire squid archive by name", () => {
        const polkaArchive = (0, _1.lookupArchive)("polkadot", { release: "FireSquid" });
        (0, assert_1.default)(polkaArchive === "https://polkadot.archive.subsquid.io/graphql");
    });
    it("lookups up evm archive by name", () => {
        const binanceArchive = (0, _1.lookupArchive)("binance", { type: "EVM" });
        (0, assert_1.default)(binanceArchive === "https://binance.archive.subsquid.io");
    });
    it("looks up by archive name without type specification", () => {
        const polkaArchive = (0, _1.lookupArchive)("polkadot");
        (0, assert_1.default)(polkaArchive === "https://polkadot.archive.subsquid.io/graphql");
        const binanceArchive = (0, _1.lookupArchive)("binance");
        (0, assert_1.default)(binanceArchive === "https://binance.archive.subsquid.io");
    });
    it("looks up by same archive name without type specification", () => {
        let caught = false;
        try {
            const moonbaseArchive = (0, _1.lookupArchive)("moonbase");
        }
        catch (e) {
            if (e instanceof assert_1.AssertionError) {
                (0, assert_1.default)(e.message === "There are multiple networks with name moonbase. Provide network type to disambiguate.");
            }
            caught = true;
        }
        (0, assert_1.default)(caught === true);
    });
    it("looks up by same archive name with type specification", () => {
        const moonbaseSubArchive = (0, _1.lookupArchive)("moonbase", { type: "Substrate" });
        (0, assert_1.default)(moonbaseSubArchive === "https://moonbase.archive.subsquid.io/graphql");
        const moonbaseEvmArchive = (0, _1.lookupArchive)("moonbase", { type: "EVM" });
        (0, assert_1.default)(moonbaseEvmArchive === "https://moonbase-evm.archive.subsquid.io");
    });
});
//# sourceMappingURL=lookup.spec.js.map