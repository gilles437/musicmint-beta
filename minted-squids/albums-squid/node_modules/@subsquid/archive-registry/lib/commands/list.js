"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const easy_table_1 = __importDefault(require("easy-table"));
const util_internal_1 = require("@subsquid/util-internal");
const registry_1 = require("../registry");
(0, util_internal_1.runProgram)(async () => {
    let program = new commander_1.Command();
    program.description(`Display list of available archives`);
    program.addOption(new commander_1.Option(`-t --type <type>`, `Network type`).choices([`evm`, `substrate`]));
    program.parse();
    let opts = program.opts();
    switch (opts.type) {
        case 'evm':
            printEvmArchives();
            break;
        case 'substrate':
            printSubstrateArchives();
            break;
        case null:
        case undefined:
            printEvmArchives();
            printSubstrateArchives();
            break;
    }
});
function printEvmArchives() {
    console.log(`EVM archives:`);
    let table = new easy_table_1.default();
    table.pushDelimeter(['network', 'endpoint']);
    for (let archive of registry_1.archivesRegistryEVM.archives) {
        table.cell('network', archive.network);
        for (let provider of archive.providers) {
            table.cell('endpoint', provider.dataSourceUrl);
            table.newRow();
        }
    }
    console.log(table.print());
}
function printSubstrateArchives() {
    console.log(`Substrate archives:`);
    let table = new easy_table_1.default();
    table.pushDelimeter(['network', 'endpoint']);
    for (let archive of registry_1.archivesRegistrySubstrate.archives) {
        table.cell('network', archive.network);
        for (let provider of archive.providers) {
            table.cell('endpoint', provider.dataSourceUrl);
            table.newRow();
        }
    }
    console.log(table.print());
}
//# sourceMappingURL=list.js.map