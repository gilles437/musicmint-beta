{
  "name": "@subsquid/ink-typegen",
  "version": "0.2.1",
  "description": "Generates TypeScript API for decoding ink! events, messages and constructors",
  "license": "GPL-3.0-or-later",
  "repository": "git@github.com:subsquid/squid.git",
  "publishConfig": {
    "access": "public"
  },
  "bin": {
    "squid-ink-typegen": "bin/run.js"
  },
  "dependencies": {
    "@subsquid/ink-abi": "^1.1.0",
    "@subsquid/substrate-typegen": "^2.2.1",
    "@subsquid/util-internal": "^1.1.0",
    "@subsquid/util-internal-code-printer": "^0.1.1",
    "commander": "^10.0.0"
  },
  "devDependencies": {
    "@types/node": "^16.18.12",
    "typescript": "~4.9.5"
  },
  "scripts": {
    "build": "rm -rf lib && tsc"
  },
  "readme": "# @subsquid/ink-typegen\n\nGenerates next code units:\n* TypeScript functions and all the necessary type definitions\nfor type-safe decoding of [ink!](https://ink.substrate.io) events, messages and constructors.\n* Class `Contract` that contains `contracts_call` queries to the contract's state.\n\n## Usage\n\n```bash\nnpm i @subsquid/ink-abi # Generated code will reference this package\nnpm i @subsquid/ink-typegen --save-dev\n```\n\n```\nOptions:\n  --abi <path>     path to a JSON metadata file\n  --output <path>  path for output typescript file\n  -h, --help       display help for command\n\nTypegen might be started as follows:\nsquid-ink-typegen --abi erc20.json --output src/erc20.ts\n```\n\n### Decoding\nGenerated fuctions allow to decode [scale](https://docs.substrate.io/reference/scale-codec/)-encoded data for 3 different kind of ink! objects:\n* `constructor` - it's arguments that the contract receives on instantiation\n* `message` - it's arguments that the contract receives on call execution\n* `event` - it's data that the contract emittes on call execution\n```ts\n// Generated code:\nconst _abi = new Abi(metadata)\n\nexport function decodeEvent(hex: string): Event {\n  return _abi.decodeEvent(hex)\n}\n\nexport function decodeMessage(hex: string): Message {\n  return _abi.decodeMessage(hex)\n}\n\nexport function decodeConstructor(hex: string): Constructor {\n  return _abi.decodeConstructor(hex)\n}\n\n// Usage example:\nlet event = decodeEvent(item.event.args.data)\nif (event.__kind === 'Transfer') {\n    // event is of type `Event_Transfer`\n}\n```\n\n### Reading state\n`Contract` class provides state calls for an every message that doesn't mutate the contract's state. The info about mutability is taken from the metadata.\n```ts\n// Generated code:\nexport class Contract {\n    total_supply(): Promise<Balance> {\n        return this.stateCall('0xdb6375a8', [])\n    }\n\n    balance_of(owner: AccountId): Promise<Balance> {\n        return this.stateCall('0x0f755a56', [owner])\n    }\n\n    allowance(owner: AccountId, spender: AccountId): Promise<Balance> {\n        return this.stateCall('0x6a00165e', [owner, spender])\n    }\n}\n\n// Usage example:\nlet contract = new Contract(ctx, contractAddress)\nlet totalSupply = await contract.total_supply()\n```"
}