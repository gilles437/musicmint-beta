"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpecFileError = exports.readSpecVersions = void 0;
const util_internal_hex_1 = require("@subsquid/util-internal-hex");
const util_internal_read_lines_1 = require("@subsquid/util-internal-read-lines");
const fs = __importStar(require("fs"));
const path_1 = require("path");
function validateSpecVersion(rec) {
    if (rec == null || Array.isArray(rec) || typeof rec != 'object')
        return 'record should be an object';
    function prop(name, type) {
        if (!(name in rec))
            return `.${name} property is missing`;
        let val = rec[name];
        switch (type) {
            case 'hex':
                if ((0, util_internal_hex_1.isHex)(val))
                    return;
                return `.${name} property must be a hex string, like 0x123aa`;
            case 'nat':
                if (Number.isInteger(val) && val >= 0)
                    return;
                return `.${name} property must be a natural number`;
            case 'string':
                if (typeof val == 'string' && val.length > 0)
                    return;
                return `.${name} property must be a non-empty string`;
        }
    }
    return prop('specName', 'string')
        || prop('specVersion', 'nat')
        || prop('blockNumber', 'nat')
        || prop('blockHash', 'hex')
        || prop('metadata', 'hex');
}
function validateSpecVersionArray(rec) {
    if (!Array.isArray(rec))
        return 'json value is not an array of spec versions';
    for (let i = 0; i < rec.length; i++) {
        let error = validateSpecVersion(rec[i]);
        if (error)
            return `record at index ${i} is invalid: ${error}`;
    }
}
function readSpecVersions(file) {
    if ((0, path_1.extname)(file) === '.json') {
        return readJson(file);
    }
    else {
        return readJsonLines(file);
    }
}
exports.readSpecVersions = readSpecVersions;
function readJsonLines(file) {
    let result = [];
    for (let line of (0, util_internal_read_lines_1.readLines)(file)) {
        let json;
        try {
            json = JSON.parse(line);
        }
        catch (e) {
            throw new SpecFileError(`Failed to parse record #${result.length + 1} of ${file}: ${e.message}`);
        }
        let error = validateSpecVersion(json);
        if (error)
            throw new SpecFileError(`Failed to extract chain version from record #${result.length + 1} of ${file}: ${error}`);
        result.push(json);
    }
    return result;
}
function readJson(file) {
    let content;
    try {
        content = fs.readFileSync(file, 'utf-8');
    }
    catch (e) {
        throw new SpecFileError(`Failed to read ${file}: ${e}`);
    }
    let json;
    try {
        json = JSON.parse(content);
    }
    catch (e) {
        throw new SpecFileError(`Failed to parse ${file}: ${e}`);
    }
    let error = validateSpecVersionArray(json);
    if (error)
        throw new SpecFileError(`Failed to extract chain versions from ${file}: ${error}`);
    return json;
}
class SpecFileError extends Error {
    get name() {
        return 'SpecFileError';
    }
}
exports.SpecFileError = SpecFileError;
//# sourceMappingURL=specVersion.js.map