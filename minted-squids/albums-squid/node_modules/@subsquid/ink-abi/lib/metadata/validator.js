"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInkProject = void 0;
const ajv_1 = __importDefault(require("ajv"));
const ink_v3_schema_json_1 = __importDefault(require("./v3/ink-v3-schema.json"));
const ink_v4_schema_json_1 = __importDefault(require("./v4/ink-v4-schema.json"));
const ajv = new ajv_1.default({
    messages: true,
    removeAdditional: false
});
ajv.addFormat('uint8', function (data) {
    return uint(data) && data < Math.pow(2, 8);
});
ajv.addFormat('uint32', function (data) {
    return uint(data) && data < Math.pow(2, 32);
});
ajv.addFormat('uint64', uint);
function uint(data) {
    return typeof data == 'number' && Number.isSafeInteger(data) && data >= 0;
}
const validatorV3 = ajv.compile(ink_v3_schema_json_1.default);
const validatorV4 = ajv.compile(ink_v4_schema_json_1.default);
function isAbiV4(abi) {
    return typeof abi === 'object' && abi !== null && abi.version == 4;
}
function makeError(validator) {
    let msg = `Invalid Ink metadata`;
    if (validator.errors?.length) {
        msg += ':';
        validator.errors.forEach(err => {
            msg += `\n\tmetadata${err.instancePath} ${err.message}`;
        });
    }
    return new Error(msg);
}
function getInkProject(abi) {
    if (isAbiV4(abi)) {
        if (validatorV4(abi)) {
            return abi;
        }
        else {
            throw makeError(validatorV4);
        }
    }
    else {
        if (validatorV3(abi)) {
            if ('V3' in abi) {
                return abi.V3;
            }
            else {
                throw new Error(`Ink metadata below V3 is not supported`);
            }
        }
        else {
            throw makeError(validatorV3);
        }
    }
}
exports.getInkProject = getInkProject;
//# sourceMappingURL=validator.js.map