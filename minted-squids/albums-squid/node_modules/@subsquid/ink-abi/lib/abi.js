"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Abi = void 0;
const scale_codec_1 = require("@subsquid/scale-codec");
const abi_description_1 = require("./abi-description");
const validator_1 = require("./metadata/validator");
const util_internal_hex_1 = require("@subsquid/util-internal-hex");
const assert_1 = __importDefault(require("assert"));
class Abi {
    constructor(abiJson) {
        this.project = (0, validator_1.getInkProject)(abiJson);
        let d = new abi_description_1.AbiDescription(this.project);
        let types = d.types();
        this.scaleCodec = new scale_codec_1.Codec(types);
        this.event = d.event();
        this.messages = d.messages();
        this.constructors = d.constructors();
        this.messageSelectors = d.messageSelectors();
        this.constructorSelectors = d.constructorSelectors();
    }
    encodeMessageInput(selector, args) {
        let message = this.getMessage(selector);
        let sink = new scale_codec_1.ByteSink();
        sink.bytes((0, util_internal_hex_1.decodeHex)(selector));
        for (let i = 0; i < message.args.length; i++) {
            let arg = message.args[i];
            this.scaleCodec.encode(arg.type.type, args[i], sink);
        }
        return sink.toBytes();
    }
    decodeMessageOutput(selector, value) {
        let message = this.getMessage(selector);
        (0, assert_1.default)(message.returnType?.type != null);
        return this.scaleCodec.decodeBinary(message.returnType.type, value);
    }
    decodeEvent(data) {
        return this.scaleCodec.decodeBinary(this.event, data);
    }
    decodeConstructor(data) {
        let src = new SelectorSource(data, this.constructorSelectors);
        return this.scaleCodec.decode(this.constructors, src);
    }
    decodeMessage(data) {
        let src = new SelectorSource(data, this.messageSelectors);
        return this.scaleCodec.decode(this.messages, src);
    }
    getMessage(selector) {
        let index = this.messageSelectors[selector];
        if (index == null) {
            throw new Error(`Unknown selector: ${selector}`);
        }
        return this.project.spec.messages[index];
    }
}
exports.Abi = Abi;
class SelectorSource extends scale_codec_1.Src {
    constructor(data, selectors) {
        let key = data.slice(0, 10);
        let index = selectors[key];
        if (index == null) {
            throw new Error(`Unknown selector: ${key}`);
        }
        super('0x' + data.slice(10));
        this.index = index;
    }
    u8() {
        if (this.index == null) {
            return super.u8();
        }
        else {
            let idx = this.index;
            this.index = undefined;
            return idx;
        }
    }
}
//# sourceMappingURL=abi.js.map