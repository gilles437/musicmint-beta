"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriorityQueue = void 0;
const util_internal_1 = require("@subsquid/util-internal");
class PriorityQueue {
    constructor() {
        this.items = [];
    }
    push(req) {
        let i = 0;
        while (i < this.items.length && this.items[i][0].priority < req.priority) {
            i += 1;
        }
        if (i == this.items.length) {
            this.items.push([req]);
        }
        else if (this.items[i][0].priority == req.priority) {
            this.items[i].push(req);
        }
        else {
            this.items.splice(i, 0, [req]);
        }
    }
    take(skip, count) {
        let requests = [];
        for (let i = 0; i < this.items.length && count > 0; i++) {
            let item = this.items[i];
            if (skip < item.length) {
                let taking = Math.min(count, item.length - skip);
                if (taking == item.length) {
                    requests.push(...item);
                    this.items.splice(i, 1);
                }
                else {
                    requests.push(...item.splice(skip, taking));
                }
                count -= taking;
            }
            else {
                skip -= item.length;
            }
        }
        return requests;
    }
    takeLast() {
        if (this.items.length == 0)
            return;
        let item = (0, util_internal_1.last)(this.items);
        if (item.length == 1) {
            this.items.pop();
            return item[0];
        }
        else {
            return item.pop();
        }
    }
    takeAll() {
        let items = this.items.flatMap(its => its);
        this.items.length = 0;
        return items;
    }
    isEmpty() {
        return this.items.length == 0;
    }
    isNotEmpty() {
        return this.items.length > 0;
    }
}
exports.PriorityQueue = PriorityQueue;
//# sourceMappingURL=queue.js.map