import { Logger } from '@subsquid/logger';
export interface Req {
    id: number;
    priority: number;
    method: string;
    params?: unknown[];
    resolve(val: any): void;
    reject(err: Error): void;
    retries: number;
}
export interface Connection {
    send(req: Req): Promise<boolean>;
    isOnline(): boolean;
    getAvgResponseTime(): number;
    getCapacity(): number;
    getMaxCapacity(): number;
    getMetrics(): RpcConnectionMetrics;
    close(): void;
}
export interface RpcConnectionMetrics {
    id: number;
    url: string;
    avgResponseTimeSeconds: number;
    requestsServed: number;
    connectionErrors: number;
}
export interface CommonConnectionOptions {
    id: number;
    url: string;
    capacity: number;
    requestTimeout: number;
    log?: Logger;
    onlineCallback?: () => void;
}
export declare abstract class ConnectionBase implements Connection {
    onlineCallback?: () => void;
    readonly id: number;
    readonly url: string;
    protected readonly requestTimeout: number;
    protected readonly log?: Logger;
    private maxCapacity;
    private capacity;
    private online;
    private epoch;
    private backoffSchedule;
    private connectionErrors;
    private connectionErrorsInRow;
    private requestsServed;
    private speed;
    private reconnectTimer?;
    private closed;
    protected constructor(options: CommonConnectionOptions);
    getAvgResponseTime(): number;
    getCapacity(): number;
    getMaxCapacity(): number;
    getMetrics(): RpcConnectionMetrics;
    isOnline(): boolean;
    send(req: Req): Promise<boolean>;
    private backoff;
    close(): void;
    protected abstract call(id: number, method: string, params?: unknown[]): Promise<any>;
    protected abstract isRetryableError(err: unknown): boolean;
    protected abstract reconnect(): Promise<void>;
    protected abstract cleanup(): void;
}
//# sourceMappingURL=base.d.ts.map