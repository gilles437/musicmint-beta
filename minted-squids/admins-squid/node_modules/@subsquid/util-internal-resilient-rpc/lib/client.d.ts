import { Logger } from '@subsquid/logger';
import { RpcConnectionMetrics } from './connection/base';
export interface RpcEndpoint {
    url: string;
    capacity?: number;
}
export interface RpcClientOptions {
    endpoints: RpcEndpoint[];
    retryAttempts?: number;
    requestTimeout?: number;
    log?: Logger;
}
export declare class RpcClient {
    private connections;
    private queue;
    private counter;
    private schedulingScheduled;
    private log?;
    private retryAttempts;
    private closed;
    constructor(options: RpcClientOptions);
    getMetrics(): RpcConnectionMetrics[];
    call<T = any>(method: string, params?: unknown[]): Promise<T>;
    call<T = any>(priority: number, method: string, params?: unknown[]): Promise<T>;
    private nextRequestId;
    private schedule;
    private performScheduling;
    private willBeFetchedByFasterConnections;
    private moveLastRequestToRandomFreeConnection;
    private stealLastRequest;
    private send;
    close(): void;
}
//# sourceMappingURL=client.d.ts.map