"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbiDescription = void 0;
const substrate_metadata_1 = require("@subsquid/substrate-metadata");
const util_1 = require("@subsquid/substrate-metadata/lib/util");
const util_internal_1 = require("@subsquid/util-internal");
class AbiDescription {
    constructor(project) {
        this.project = project;
        this.event();
        this.constructors();
        this.messages();
    }
    messageSelectors() {
        let map = {};
        this.project.spec.messages.forEach((msg, index) => {
            map[msg.selector] = index;
        });
        return map;
    }
    constructorSelectors() {
        let map = {};
        this.project.spec.constructors.forEach((msg, index) => {
            map[msg.selector] = index;
        });
        return map;
    }
    messages() {
        return this.createMessagesType(this.project.spec.messages);
    }
    constructors() {
        return this.createMessagesType(this.project.spec.constructors);
    }
    createMessagesType(list) {
        return this.add({
            kind: substrate_metadata_1.TypeKind.Variant,
            variants: list.map((msg, index) => {
                return {
                    name: normalizeLabel(msg.label),
                    index,
                    fields: msg.args.map(arg => {
                        return {
                            name: normalizeLabel(arg.label),
                            type: arg.type.type
                        };
                    }),
                    docs: msg.docs
                };
            })
        });
    }
    event() {
        let variants = this.project.spec.events.map((e, index) => {
            return {
                name: normalizeLabel(e.label),
                index,
                fields: e.args.map(arg => {
                    return {
                        name: normalizeLabel(arg.label),
                        type: arg.type.type,
                        docs: arg.docs
                    };
                })
            };
        });
        return this.add({
            kind: substrate_metadata_1.TypeKind.Variant,
            variants,
            path: ['Event']
        });
    }
    _types() {
        return this.project.types.map(toType);
    }
    add(type) {
        return this._types().push(type) - 1;
    }
    types() {
        return (0, util_1.normalizeMetadataTypes)(this._types());
    }
}
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], AbiDescription.prototype, "messageSelectors", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], AbiDescription.prototype, "constructorSelectors", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Number)
], AbiDescription.prototype, "messages", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Number)
], AbiDescription.prototype, "constructors", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Number)
], AbiDescription.prototype, "event", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], AbiDescription.prototype, "_types", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], AbiDescription.prototype, "types", null);
exports.AbiDescription = AbiDescription;
function toType(t) {
    let info = {
        path: t.type.path,
        docs: t.type.docs
    };
    if ('primitive' in t.type.def) {
        return {
            kind: substrate_metadata_1.TypeKind.Primitive,
            primitive: capitalize(t.type.def.primitive),
            ...info
        };
    }
    else if ('compact' in t.type.def) {
        return {
            kind: substrate_metadata_1.TypeKind.Compact,
            type: t.type.def.compact.type,
            ...info
        };
    }
    else if ('sequence' in t.type.def) {
        return {
            kind: substrate_metadata_1.TypeKind.Sequence,
            type: t.type.def.sequence.type,
            ...info
        };
    }
    else if ('bitsequence' in t.type.def) {
        return {
            kind: substrate_metadata_1.TypeKind.BitSequence,
            bitStoreType: t.type.def.bitsequence.bit_store_type,
            bitOrderType: t.type.def.bitsequence.bit_order_type,
            ...info
        };
    }
    else if ('array' in t.type.def) {
        return {
            kind: substrate_metadata_1.TypeKind.Array,
            type: t.type.def.array.type,
            len: t.type.def.array.len,
            ...info
        };
    }
    else if ('tuple' in t.type.def) {
        return {
            kind: substrate_metadata_1.TypeKind.Tuple,
            tuple: t.type.def.tuple,
            ...info
        };
    }
    else if ('composite' in t.type.def) {
        return {
            kind: substrate_metadata_1.TypeKind.Composite,
            fields: t.type.def.composite.fields?.map(toField) || [],
            ...info
        };
    }
    else if ('variant' in t.type.def) {
        return {
            kind: substrate_metadata_1.TypeKind.Variant,
            variants: t.type.def.variant.variants?.map(v => {
                let { name, index, docs } = v;
                return {
                    name,
                    index,
                    fields: v.fields?.map(toField) || [],
                    docs
                };
            }) || [],
            ...info
        };
    }
    else {
        throw (0, util_internal_1.unexpectedCase)();
    }
}
function toField(f) {
    let { name, ...rest } = f;
    let sf = rest;
    if (name) {
        sf.name = name;
    }
    return sf;
}
function capitalize(value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
}
function normalizeLabel(label) {
    return label.replace('::', '_');
}
//# sourceMappingURL=abi-description.js.map