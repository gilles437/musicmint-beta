"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Typegen = void 0;
const abi_description_1 = require("@subsquid/ink-abi/lib/abi-description");
const validator_1 = require("@subsquid/ink-abi/lib/metadata/validator");
const ifs_1 = require("@subsquid/substrate-typegen/lib/ifs");
const names_1 = require("@subsquid/substrate-typegen/lib/names");
const util_internal_1 = require("@subsquid/util-internal");
const fs_1 = __importDefault(require("fs"));
class Typegen {
    constructor(abiFile, out) {
        this.abiFile = abiFile;
        this.out = out;
    }
    metadata() {
        let content = fs_1.default.readFileSync(this.abiFile, 'utf-8');
        try {
            return JSON.parse(content);
        }
        catch (e) {
            throw new Error(`Failed to parse ${this.abiFile}: ${e.message}`);
        }
    }
    project() {
        try {
            return (0, validator_1.getInkProject)(this.metadata());
        }
        catch (e) {
            throw new Error(`Invalid ${this.abiFile}: ${e.message}`);
        }
    }
    description() {
        return new abi_description_1.AbiDescription(this.project());
    }
    nameAssignment() {
        let d = this.description();
        let names = new names_1.Names(d.types());
        names.reserve('metadata');
        names.assign(d.event(), 'Event');
        names.assign(d.messages(), 'Message');
        names.assign(d.constructors(), 'Constructor');
        function addArgAlias({ type }) {
            if (type.displayName?.length) {
                names.alias(type.type, (0, util_internal_1.last)(type.displayName));
            }
        }
        this.project().spec.events.forEach(e => {
            e.args.forEach(addArgAlias);
        });
        this.project().spec.messages.forEach(m => {
            m.args.forEach(addArgAlias);
        });
        this.project().spec.constructors.forEach(c => {
            c.args.forEach(addArgAlias);
        });
        return names.getAssignment();
    }
    generate() {
        let d = this.description();
        let ifs = new ifs_1.Interfaces(d.types(), this.nameAssignment());
        this.out.line(`import {Abi, encodeCall, decodeResult} from "@subsquid/ink-abi"`);
        this.out.line();
        this.out.line(`export const metadata = ${JSON.stringify(this.metadata(), null, 2)}`);
        this.out.line();
        this.out.line(`const _abi = new Abi(metadata)`);
        this.out.line();
        this.out.block(`export function decodeEvent(hex: string): ${ifs.use(d.event())}`, () => {
            this.out.line(`return _abi.decodeEvent(hex)`);
        });
        this.out.line();
        this.out.block(`export function decodeMessage(hex: string): ${ifs.use(d.messages())}`, () => {
            this.out.line(`return _abi.decodeMessage(hex)`);
        });
        this.out.line();
        this.out.block(`export function decodeConstructor(hex: string): ${ifs.use(d.constructors())}`, () => {
            this.out.line(`return _abi.decodeConstructor(hex)`);
        });
        this.out.line();
        this.out.block('export interface Chain', () => {
            this.out.block('client:', () => {
                this.out.line('call: <T=any>(method: string, params?: unknown[]) => Promise<T>');
            });
        });
        this.out.line();
        this.out.block('export interface ChainContext', () => {
            this.out.line('_chain: Chain');
        });
        this.out.line();
        this.out.block('export class Contract', () => {
            this.out.line('constructor(private ctx: ChainContext, private address: string, private blockHash?: string) { }');
            this.project().spec.messages.forEach(m => {
                if (!m.mutates) {
                    let args = m.args.map(arg => `${arg.label}: ${ifs.use(arg.type.type)}`).join(', ');
                    let returnType = (0, util_internal_1.assertNotNull)(m.returnType?.type);
                    let callArgs = m.args.map(arg => arg.label).join(', ');
                    this.out.line();
                    this.out.block(`${m.label.replace('::', '_')}(${args}): Promise<${ifs.use(returnType)}>`, () => {
                        this.out.line(`return this.stateCall('${m.selector}', [${callArgs}])`);
                    });
                }
            });
            this.out.line();
            this.out.block('private async stateCall<T>(selector: string, args: any[]): Promise<T>', () => {
                this.out.line('let input = _abi.encodeMessageInput(selector, args)');
                this.out.line('let data = encodeCall(this.address, input)');
                this.out.line("let result = await this.ctx._chain.client.call('state_call', ['ContractsApi_call', data, this.blockHash])");
                this.out.line('let value = decodeResult(result)');
                this.out.line('return _abi.decodeMessageOutput(selector, value)');
            });
        });
        ifs.generate(this.out);
        this.out.line();
        // language=TypeScript
        this.out.line(`export type Result<T, E> = {__kind: 'Ok', value: T} | {__kind: 'Err', value: E}`);
    }
}
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Typegen.prototype, "metadata", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Typegen.prototype, "project", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", abi_description_1.AbiDescription)
], Typegen.prototype, "description", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Map)
], Typegen.prototype, "nameAssignment", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Typegen.prototype, "generate", null);
exports.Typegen = Typegen;
//# sourceMappingURL=typegen.js.map