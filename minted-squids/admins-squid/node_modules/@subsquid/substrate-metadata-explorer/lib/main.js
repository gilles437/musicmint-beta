"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@subsquid/logger");
const util_internal_1 = require("@subsquid/util-internal");
const util_internal_commander_1 = require("@subsquid/util-internal-commander");
const util_internal_resilient_rpc_1 = require("@subsquid/util-internal-resilient-rpc");
const commander_1 = require("commander");
const process = __importStar(require("process"));
const archiveApi_1 = require("./archiveApi");
const chainApi_1 = require("./chainApi");
const explore_1 = require("./explore");
const out_1 = require("./out");
const log = (0, logger_1.createLogger)('sqd:substrate-metadata-explorer');
(0, util_internal_1.runProgram)(async () => {
    let program = new commander_1.Command();
    program.description(`
Finds all chain spec versions and stores its metadata in JSON lines file.

Either chain node RPC endpoint or squid archive can serve as a data source.

If the output file already exists, it will not start from scratch, 
but rather try to augment it.
`.trim());
    program.usage('squid-substrate-metadata-explorer --chain <url> --out <file> [options]');
    program.requiredOption('--out <file>', 'output file');
    program.option('--archive <url>', 'squid substrate archive', (0, util_internal_commander_1.Url)(['http:', 'https:']));
    program.option('--chain <url>', 'chain rpc endpoint', (0, util_internal_commander_1.Url)(['http:', 'https:', 'ws:', 'wss:']));
    let options = program.parse().opts();
    let api;
    let out = new out_1.Out(options.out);
    if (out.isJson()) {
        log.warn(`JSON lines (.jsonl) format is recommended instead of .json, but output file is set to ${options.out}`);
    }
    if (options.archive) {
        api = new archiveApi_1.ArchiveApi(options.archive, log);
    }
    else if (options.chain) {
        let client = new util_internal_resilient_rpc_1.RpcClient({
            endpoints: [{
                    url: options.chain,
                    capacity: 5
                }],
            retryAttempts: 3,
            log: log.child('chain-rpc')
        });
        api = new chainApi_1.ChainApi(client, log);
    }
    else {
        log.fatal('either --archive or --chain option is required');
        process.exit(1);
    }
    await (0, explore_1.explore)(api, out, log);
}, err => log.fatal(err));
//# sourceMappingURL=main.js.map