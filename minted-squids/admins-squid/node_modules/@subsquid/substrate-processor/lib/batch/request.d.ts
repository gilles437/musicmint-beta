import { EvmTopicSet } from '../interfaces/dataHandlers';
import { CallDataRequest, EventDataRequest } from '../interfaces/dataSelection';
type EventReq = {
    name: string;
    data?: EventDataRequest;
};
type CallReq = {
    name: string;
    data?: CallDataRequest;
};
type EvmLogReq = {
    contract: string;
    filter?: EvmTopicSet[];
    data?: EventDataRequest;
};
type EthereumTransactionReq = {
    contract: string;
    sighash?: string;
    data?: CallDataRequest;
};
type ContractsEventReq = {
    contract: string;
    data?: EventDataRequest;
};
type GearMessageEnqueuedReq = {
    program: string;
    data?: EventDataRequest;
};
type GearUserMessageSentReq = {
    program: string;
    data?: EventDataRequest;
};
type AcalaEvmLogFilter = {
    contract?: string;
    filter?: EvmTopicSet[];
};
type AcalaEvmExecutedReq = {
    contract: string;
    logs?: AcalaEvmLogFilter[];
    data?: EventDataRequest;
};
type AcalaEvmExecutedFailedReq = {
    contract: string;
    logs?: AcalaEvmLogFilter[];
    data?: EventDataRequest;
};
export interface BatchRequest {
    getIncludeAllBlocks(): boolean;
    getEvents(): EventReq[];
    getCalls(): CallReq[];
    getEvmLogs(): EvmLogReq[];
    getEthereumTransactions(): EthereumTransactionReq[];
    getContractsEvents(): ContractsEventReq[];
    getGearMessagesEnqueued(): GearMessageEnqueuedReq[];
    getGearUserMessagesSent(): GearUserMessageSentReq[];
    getAcalaEvmExecuted(): AcalaEvmExecutedReq[];
    getAcalaEvmExecutedFailed(): AcalaEvmExecutedFailedReq[];
}
export declare class PlainBatchRequest implements BatchRequest {
    events: EventReq[];
    calls: CallReq[];
    evmLogs: EvmLogReq[];
    ethereumTransactions: EthereumTransactionReq[];
    contractsEvents: ContractsEventReq[];
    gearMessagesEnqueued: GearMessageEnqueuedReq[];
    gearUserMessagesSent: GearUserMessageSentReq[];
    acalaEvmExecuted: AcalaEvmExecutedReq[];
    acalaEvmExecutedFailed: AcalaEvmExecutedFailedReq[];
    includeAllBlocks: boolean;
    getEvents(): EventReq[];
    getCalls(): CallReq[];
    getEvmLogs(): EvmLogReq[];
    getEthereumTransactions(): EthereumTransactionReq[];
    getContractsEvents(): ContractsEventReq[];
    getGearMessagesEnqueued(): GearMessageEnqueuedReq[];
    getGearUserMessagesSent(): GearUserMessageSentReq[];
    getIncludeAllBlocks(): boolean;
    getAcalaEvmExecuted(): AcalaEvmExecutedReq[];
    getAcalaEvmExecutedFailed(): AcalaEvmExecutedFailedReq[];
    merge(other: PlainBatchRequest): PlainBatchRequest;
}
export {};
//# sourceMappingURL=request.d.ts.map